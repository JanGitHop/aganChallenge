{
	"info": {
		"_postman_id": "579cee0e-e0c4-4ff4-b09a-21c046dbec7f",
		"name": "asGoodAsNew Challenge - Cart Api",
		"description": "### **Überblick**\n\nDiese Postman-Collection demonstriert eine vollständige Implementierung der **Cart API** aus der _AsGoodAsNew Coding Challenge_.  \nSie zeigt alle grundlegenden **CRUD-Operationen** (Create, Read, Update, Delete) und dient als Referenz zum Testen und Verifizieren der API-Funktionalität eines einfachen Warenkorbsystems.\n\n### **Basis-URL**\n\n```\n{{base_url}}\n\n ```\n\nDiese Variable verweist auf den API-Root-Endpoint deiner lokalen oder deployten Instanz  \n(z. B. `https://localhost/api`).\n\n### **Endpoints**\n\n| Methode | Endpoint | Beschreibung |\n| --- | --- | --- |\n| **GET** | `/carts` | Gibt alle Carts zurück |\n| **GET** | `/carts/{{id}}` | Gibt einen einzelnen Cart anhand seiner ID zurück |\n| **POST** | `/carts` | Erstellt einen neuen Cart |\n| **POST** | `/carts/{{id}}/items` | Fügt einem bestehenden Cart ein Item hinzu |\n| **PATCH** | `/carts/{{id}}/items/{{item_id}}` | Aktualisiert Menge oder Details eines Items |\n| **DELETE** | `/carts/{{id}}/items/{{item_id}}` | Entfernt ein Item aus dem Cart |\n\n### **Variablen**\n\n| Variable | Beispielwert | Beschreibung |\n| --- | --- | --- |\n| `base_url` | `https://localhost/api` | Basis-Endpoint der API |\n| `id` | `b26a0c6b-42f7-497b-8a58-0329b4f8d567` | Beispiel-ID eines Carts |\n| `item_id` | `6c918b40-9f0b-4a20-9f82-30a7e19cbfe7` | Beispiel-ID eines Items im Cart |\n\n### **Tests**\n\nJede Anfrage enthält einfache **Statuscode-Prüfungen** (`200`, `201`, `204`).  \nDiese lassen sich bei Bedarf um weiterführende Tests erweitern, z. B.:\n\n- **Schema-Validierung** der Response\n    \n- **Laufzeit- oder Größenprüfung**\n    \n- **Inhalts-Validierung** bestimmter Felder\n    \n\n### **Verwendung**\n\n1. Collection in Postman importieren\n    \n2. Umgebungsvariablen (`base_url`, `id`, `item_id`) anpassen\n    \n3. Requests schrittweise ausführen, um den Cart-Lebenszyklus zu simulieren:\n    \n    - Cart erstellen\n        \n    - Items hinzufügen\n        \n    - Items aktualisieren oder entfernen\n        \n    - Cart abrufen\n        \n4. Ergebnisse und Tests im **„Test Results“-Tab** überprüfen\n    \n\n### **Hinweise**\n\n- Alle Requests verwenden **JSON** im Request-Body.\n    \n- Die Struktur folgt den **REST-Konventionen** und ist klar nach Anwendungsfällen gegliedert.\n    \n- Tests können mit Postman-Skripten (`pm.test`, `pm.expect`) erweitert werden, um eine automatisierte Validierung im CI-Kontext zu ermöglichen.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49520446",
		"_collection_link": "https://jans-ebox-8914948.postman.co/workspace/Jan-G's-Workspace~59d7882b-1ffa-408a-8ec0-2e315a14916a/collection/49520446-579cee0e-e0c4-4ff4-b09a-21c046dbec7f?action=share&source=collection_link&creator=49520446"
	},
	"item": [
		{
			"name": "Negative",
			"item": [
				{
					"name": "Cart not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 bei unbekannter Cart-ID\", () => pm.response.to.have.status(404));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{random-uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{random-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item with 0 quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400/422 bei ungültiger Menge\", () => pm.expect(pm.response.code).to.be.oneOf([400, 422]));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n    {\n        \"productId\": 2345,\n        \"productName\": \"iPad\",\n        \"price\": 599.99,\n        \"quantity\": 0,\n        \"category\": \"Electronics\",\n        \"sku\": \"IPAD-25-PRO1\"\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{id}}",
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Carts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/carts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "List Carts incl. Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/carts?expand=items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts"
					],
					"query": [
						{
							"key": "expand",
							"value": "items"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Cart by Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.variables.get(\"id\")) {",
							"  throw new Error(\"Fehlende Cart-ID: Bitte zuerst 'Create New Cart' ausführen ({{id}} wird dabei gesetzt).\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/carts/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201/200\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"const json = pm.response.json();",
							"",
							"// Minimal-Validierung des Schemas",
							"pm.test(\"Response enthält erwartete Felder\", function () {",
							"  [\"id\", \"createdAt\", \"updatedAt\", \"items\", \"total\"].forEach(k => pm.expect(json).to.have.property(k));",
							"});",
							"",
							"// UUID-Validierung (RFC4122 v1–v5)",
							"pm.test(\"id ist eine gültige UUID\", function () {",
							"  pm.expect(json.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
							"});",
							"",
							"// createdAt grob plausibel (ISO-8601)",
							"pm.test(\"createdAt ist ISO-8601-konform\", function () {",
							"  pm.expect(Date.parse(json.createdAt)).to.be.a(\"number\");",
							"});",
							"",
							"// Typ-/Inhaltschecks",
							"pm.test(\"items ist Array und total ist Zahl\", function () {",
							"  pm.expect(json.items).to.be.an(\"array\");",
							"  pm.expect(json.total).to.be.a(\"number\");",
							"});",
							"",
							"// ID für Folge-Requests speichern (Collection-Variable)",
							"pm.collectionVariables.set(\"id\", json.id);",
							"",
							"// Optional: Sichtbarer Log",
							"console.log(\"Cart ID gespeichert:\", pm.collectionVariables.get(\"id\"));",
							"",
							"// Sicherheitsnetz: Test, dass die ID tatsächlich gespeichert wurde",
							"pm.test(\"Cart-ID für Folge-Requests gespeichert\", function () {",
							"  pm.expect(pm.collectionVariables.get(\"id\")).to.eql(json.id);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/carts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Add Item to Cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"[\"id\"].forEach(v => {",
							"  if (!pm.variables.get(v)) throw new Error(`Fehlende Variable: {{${v}}}`);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201/200\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"const json = pm.response.json();",
							"",
							"if (json && json.id) {",
							"  pm.collectionVariables.set(\"item_id\", json.id);",
							"  pm.test(\"Item-ID gespeichert\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"item_id\")).to.eql(json.id);",
							"  });",
							"} else {",
							"  console.warn(\"Keine Item-ID in der Response gefunden.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n    {\n        \"productId\": 2345,\n        \"productName\": \"iPad\",\n        \"price\": 599.99,\n        \"quantity\": 1,\n        \"category\": \"Electronics\",\n        \"sku\": \"IPAD-25-PRO1\"\n    }\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/carts/{{id}}/items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts",
						"{{id}}",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"[\"id\"].forEach(v => {",
							"  if (!pm.variables.get(v)) throw new Error(`Fehlende Variable: {{${v}}}`);",
							"});",
							"",
							"if (!pm.variables.get(\"item_id\")) {",
							"  throw new Error(\"Fehlende Item-ID: Bitte zuerst 'Add Item to Cart' ausführen ({{item_id}} wird dabei gesetzt).\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"quantity\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/carts/{{id}}/items/{{item_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts",
						"{{id}}",
						"items",
						"{{item_id}}"
					]
				},
				"description": "This is a PATCH request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Remove Item from Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"[\"id\"].forEach(v => {",
							"  if (!pm.variables.get(v)) throw new Error(`Fehlende Variable: {{${v}}}`);",
							"});",
							"",
							"if (!pm.variables.get(\"item_id\")) {",
							"  throw new Error(\"Fehlende Item-ID: Bitte zuerst 'Add Item to Cart' ausführen ({{item_id}} wird dabei gesetzt).\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/carts/{{id}}/items/{{item_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"carts",
						"{{id}}",
						"items",
						"{{item_id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// 1) Kein 5xx",
					"pm.test(\"Kein Serverfehler (5xx)\", () => {",
					"  pm.expect(pm.response.code).to.not.be.within(500, 599);",
					"});",
					"",
					"// 2) Content-Type passt zu JSON",
					"pm.test(\"Content-Type ist JSON\", () => {",
					"  const ct = pm.response.headers.get(\"Content-Type\") || \"\";",
					"  pm.expect(ct.toLowerCase()).to.include(\"application/json\");",
					"});",
					"",
					"// 3) Antwortzeit-Budget (z. B. 500 ms)",
					"pm.test(\"Antwort < 500 ms\", () => {",
					"  pm.expect(pm.response.responseTime).to.be.below(500);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://localhost/api",
			"description": "test environment"
		},
		{
			"key": "id",
			"value": "00000000-0000-0000-0000-000000000000",
			"description": "string (uuid)"
		},
		{
			"key": "item_id",
			"value": "11111111-1111-1111-1111-111111111111",
			"description": "string (uuid)"
		},
		{
			"key": "random-uuid",
			"value": "22222222-2222-2222-2222-222222222222",
            "description": "string (uuid)"
		}
	]
}
