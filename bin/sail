#!/usr/bin/env bash

# AsGoodasNew Sail - Laravel Sail-inspired CLI for Symfony + FrankenPHP
# Provides convenient Docker management commands

COMPOSE="docker compose"
APP_SERVICE="frankenphp"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if docker compose is available
if ! docker compose version &> /dev/null 2>&1; then
    echo -e "${RED}Error: Docker Compose is not available.${NC}"
    exit 1
fi

# Function to display help
function display_help {
    echo -e "${BLUE}AsGoodasNew Sail - Docker Management CLI${NC}"
    echo ""
    echo "Usage: sail [command] [options]"
    echo ""
    echo -e "${YELLOW}Container Management:${NC}"
    echo "  up              Start all services"
    echo "  down            Stop all services"
    echo "  restart         Restart all services"
    echo "  ps              Show service status"
    echo "  logs [service]  View logs (default: all services)"
    echo "  build           Rebuild containers"
    echo ""
    echo -e "${YELLOW}Application Commands:${NC}"
    echo "  shell           Enter app container shell"
    echo "  root-shell      Enter app container as root"
    echo "  php [...]       Run PHP command"
    echo "  composer [...]  Run Composer command"
    echo "  console [...]   Run Symfony console command"
    # echo "  npm [...]       Run npm command in vite container"
    echo ""
    echo -e "${YELLOW}Database Commands:${NC}"
    echo "  db              Enter PostgreSQL shell"
    echo "  db-reset        Drop and recreate database"
    echo "  migrate         Run Doctrine migrations"
    echo ""
    echo -e "${YELLOW}HTTPS/Certificate:${NC}"
    echo "  caddy [...]     Run Caddy commands"
    echo "  trust-cert      Trust local CA certificate (requires sudo)"
    echo "  cert-info       Show certificate information"
    echo ""
    echo -e "${YELLOW}Utility Commands:${NC}"
    echo "  fresh           Fresh install (rebuild, clear cache, migrate)"
    echo "  clear           Clear Symfony cache"
    echo "  test [...]      Run PHPUnit tests"
    echo "  tinker          Open PHP interactive shell (PsySH if available)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  sail up"
    echo "  sail console make:controller"
    echo "  sail composer require symfony/mailer"
    echo "  sail test"
    echo ""
}

# If no arguments, show help
if [ $# -eq 0 ]; then
    display_help
    exit 0
fi

# Parse command
COMMAND="$1"
shift

case "$COMMAND" in
    # Container management
    "up")
        $COMPOSE up -d
        ;;
    "down")
        $COMPOSE down
        ;;
    "restart")
        $COMPOSE restart "$@"
        ;;
    "ps")
        $COMPOSE ps
        ;;
    "logs")
        if [ $# -eq 0 ]; then
            $COMPOSE logs -f
        else
            $COMPOSE logs -f "$@"
        fi
        ;;
    "build")
        $COMPOSE build --no-cache "$@"
        ;;

    # Application commands
    "shell")
        $COMPOSE exec "$APP_SERVICE" sh
        ;;
    "root-shell")
        $COMPOSE exec -u root "$APP_SERVICE" sh
        ;;
    "php")
        $COMPOSE exec "$APP_SERVICE" php "$@"
        ;;
    "composer")
        $COMPOSE exec "$APP_SERVICE" composer "$@"
        ;;
    "console")
        $COMPOSE exec "$APP_SERVICE" php bin/console "$@"
        ;;
    # "npm")
    #     $COMPOSE exec vite npm "$@"
    #     ;;

    # Database commands
    "db")
        $COMPOSE exec database psql -U app -d app
        ;;
    "db-reset")
        echo -e "${YELLOW}Dropping and recreating database...${NC}"
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:database:drop --force --if-exists
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:database:create
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:migrations:migrate --no-interaction
        echo -e "${GREEN}Database reset complete!${NC}"
        ;;
    "migrate")
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:migrations:migrate "$@"
        ;;

    # HTTPS/Certificate commands
    "caddy")
        $COMPOSE exec "$APP_SERVICE" caddy "$@"
        ;;
    "trust-cert")
        echo -e "${YELLOW}Trusting Caddy local CA certificate...${NC}"
        echo "This will extract the Caddy root CA and install it to your system."
        echo ""

        # Extract CA certificate
        docker compose exec "$APP_SERVICE" cat /data/caddy/pki/authorities/local/root.crt > /tmp/caddy-root-ca.crt 2>/dev/null

        if [ ! -f /tmp/caddy-root-ca.crt ]; then
            echo -e "${RED}Error: Could not find Caddy CA certificate.${NC}"
            echo "Make sure the app container is running: sail up"
            exit 1
        fi

        # Detect OS and install certificate
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            echo -e "${YELLOW}Installing certificate to macOS Keychain...${NC}"
            sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/caddy-root-ca.crt
            echo -e "${GREEN}✓ Certificate installed! Restart your browser to apply changes.${NC}"
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Linux
            echo -e "${YELLOW}Installing certificate to Linux trust store...${NC}"
            sudo cp /tmp/caddy-root-ca.crt /usr/local/share/ca-certificates/caddy-root-ca.crt
            sudo update-ca-certificates
            echo -e "${GREEN}✓ Certificate installed! Restart your browser to apply changes.${NC}"
        else
            echo -e "${YELLOW}Unknown OS. Please manually trust this certificate:${NC}"
            echo "/tmp/caddy-root-ca.crt"
        fi
        ;;
    "cert-info")
        echo -e "${YELLOW}Caddy Certificate Information:${NC}"
        docker compose exec "$APP_SERVICE" caddy trust --cert-info 2>/dev/null || \
        echo -e "${BLUE}Run 'sail trust-cert' to install the local CA certificate.${NC}"
        ;;

    # Utility commands
    "fresh")
        echo -e "${YELLOW}Fresh installation starting...${NC}"
        $COMPOSE down -v
        $COMPOSE build --no-cache
        $COMPOSE up -d
        sleep 5
        $COMPOSE exec "$APP_SERVICE" composer install
        $COMPOSE exec "$APP_SERVICE" php bin/console cache:clear
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:database:create --if-not-exists
        $COMPOSE exec "$APP_SERVICE" php bin/console doctrine:migrations:migrate --no-interaction
        echo -e "${GREEN}✓ Fresh installation complete!${NC}"
        ;;
    "clear")
        $COMPOSE exec "$APP_SERVICE" php bin/console cache:clear "$@"
        ;;
    "test")
        $COMPOSE exec "$APP_SERVICE" php bin/phpunit "$@"
        ;;
    "tinker")
        if $COMPOSE exec "$APP_SERVICE" test -f vendor/bin/psysh 2>/dev/null; then
            $COMPOSE exec "$APP_SERVICE" vendor/bin/psysh
        else
            echo -e "${YELLOW}PsySH not installed. Starting basic PHP REPL...${NC}"
            $COMPOSE exec "$APP_SERVICE" php -a
        fi
        ;;

    # Help
    "help"|"-h"|"--help")
        display_help
        ;;

    # Unknown command - pass through to docker compose
    *)
        $COMPOSE "$COMMAND" "$@"
        ;;
esac
